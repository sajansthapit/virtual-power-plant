package com.sajansthapit.virtual_power_plant.service.impl;import com.sajansthapit.virtual_power_plant.dto.BatteryDto;import com.sajansthapit.virtual_power_plant.dto.request.BatteryRequest;import com.sajansthapit.virtual_power_plant.dto.response.BatterySaveResponse;import com.sajansthapit.virtual_power_plant.exception_handler.exceptions.DuplicateBatteryException;import com.sajansthapit.virtual_power_plant.model.Battery;import com.sajansthapit.virtual_power_plant.repository.BatteryRepository;import com.sajansthapit.virtual_power_plant.service.IBatteryService;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.List;@Service@AllArgsConstructorpublic class BatteryService implements IBatteryService {    private final BatteryRepository batteryRepository;    @Override    @Transactional    public BatterySaveResponse saveAll(BatteryRequest batteryRequest) {        List<String> errorMessage = new ArrayList<>();        List<Battery> batteriesList = new ArrayList<>();        batteryRequest.batteries().forEach(battery -> {            try {                checkDuplicate(battery);                batteriesList.add(Battery.builder()                        .name(battery.name())                        .postCode(battery.postCode())                        .wattCapacity(battery.wattCapacity())                        .build());            } catch (DuplicateBatteryException exception) {                errorMessage.add(exception.getMessage());            }        });        if (!batteriesList.isEmpty()) {            batteryRepository.saveAll(batteriesList);        }        String message = "Total of " + batteriesList.size() + " batteries saved successfully.";        if (!errorMessage.isEmpty()) {            message += " Some errors were found: " + errorMessage;        }        return new BatterySaveResponse(message);    }    private void checkDuplicate(BatteryDto battery) throws DuplicateBatteryException {        batteryRepository.findByNameAndPostCodeAndWattCapacity(battery.name(), battery.postCode(), battery.wattCapacity())                .ifPresent(existingBattery -> {                    throw new DuplicateBatteryException("Battery with name " + battery.name() + " and " + battery.postCode() + " of " + battery.wattCapacity() + " watt capacity already exists");                });    }}