package com.sajansthapit.virtual_power_plant.aop;import lombok.extern.slf4j.Slf4j;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;import org.springframework.stereotype.Component;import java.util.Arrays;@Slf4j@Aspect@Componentpublic class LoggingAspect {    /**     * //     * Pointcut that matches all repositories, services and Web REST endpoints.     * //     */    @Pointcut("within(@org.springframework.web.bind.annotation.RestController *)")    public void springBeanPointcut() {        // Method is empty as this is just a Pointcut, the implementations are in the advices.    }    //    /**//     * Pointcut that matches all Spring beans in the application's main packages.//     */    @Pointcut("within(com.sajansthapit.virtual_power_plant..*)")    public void applicationPackagePointcut() {        // Method is empty as this is just a Pointcut, the implementations are in the advices.    }    //    @Around("applicationPackagePointcut() && springBeanPointcut()")    public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {        if (log.isDebugEnabled()) {            log.debug("Enter: {}.{}() with argument[s] = {}", joinPoint.getSignature().getDeclaringTypeName(),                    joinPoint.getSignature().getName(), Arrays.toString(joinPoint.getArgs()));        }        Object result = joinPoint.proceed();        if (log.isDebugEnabled()) {            log.debug("Exit: {}.{}() with result = {}", joinPoint.getSignature().getDeclaringTypeName(),                    joinPoint.getSignature().getName(), result);        }        return result;    }}